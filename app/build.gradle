apply plugin: 'com.android.application'

def cfg = rootProject.ext.android
def appId = rootProject.ext.appId

//厂商
String firm = ""

android {

    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    dexOptions {
        jumboMode = true
    }

    defaultConfig {
        multiDexEnabled true
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode //更新次数
        versionName cfg.versionName //版本号

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }


    productFlavors {
        //苹果厂商
        apple {
            firm = "apple"
            applicationId "com.hb." + firm//动态配置包名
            dependencies.add("compile", project.project(':' + 'apple_library'))
        }
        //香蕉厂商
        banana {
            firm = "banana"
            applicationId "com.hb." + firm//动态配置包名
            dependencies.add("compile", project.project(':' + 'banana_library'))
        }
        //橙子厂商
        orange {
            firm = "orange"
            applicationId "com.hb." + firm//动态配置包名
            dependencies.add("compile", project.project(':' + 'orange_library'))
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //release 时 debug 目录下文件不需要合并到主工程
                    exclude '**/debug/**'
                }
            }
        }
    }
}

if(!isModule.toBoolean()){
    println "isModule package:"+firm
    switch (firm){
        case "apple":
            dependencies.add("compile", project.project(':' + 'apple_library'))
            break;
        case "banana":
            dependencies.add("compile", project.project(':' + 'banana_library'))
            break;
        case "orange":
            dependencies.add("compile", project.project(':' + 'orange_library'))
            break;
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':base_library')
}
